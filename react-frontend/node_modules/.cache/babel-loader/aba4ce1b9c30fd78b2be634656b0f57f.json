{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/components/src/comp/GlobalMap.js\";\nimport React, { useState } from 'react';\nimport PopupCard from './PopupCard'; // Import the PopupCard component\nimport './GlobalMap.css'; // Add CSS for map points and image styling\n\nconst GlobalMap = () => {\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false); // New state for transition\n\n  // Define clickable points with coordinates relative to the map image\n  const points = [{\n    id: 1,\n    title: 'Warrior',\n    name: 'Geralt of Rivia',\n    description: 'A skilled Witcher and monster hunter.',\n    imgUrl: '/profile.jpg',\n    detailedPageUrl: '/point1',\n    top: '20%',\n    left: '40%'\n  }, {\n    id: 2,\n    title: 'Mage',\n    name: 'Yennefer of Vengerberg',\n    description: 'A powerful sorceress with a mysterious past.',\n    imgUrl: '/img2.jpg',\n    detailedPageUrl: '/point2',\n    top: '50%',\n    left: '60%'\n  }, {\n    id: 3,\n    title: 'Princess',\n    name: 'Ciri of Cintra',\n    description: 'A princess with a destiny tied to Geralt and Yennefer.',\n    imgUrl: '/img3.jpg',\n    detailedPageUrl: '/point3',\n    top: '70%',\n    left: '30%'\n  }];\n  const handlePointClick = point => {\n    if (selectedPoint) {\n      // If there's a selected point, transition out\n      setIsTransitioning(true);\n      setTimeout(() => {\n        setSelectedPoint(point); // Set the new point after transition\n        setIsTransitioning(false); // Reset the transition state\n      }, 300); // Adjust the timeout duration to match your animation duration\n    } else {\n      // If no point is selected, set the new point immediately\n      setSelectedPoint(point);\n    }\n  };\n  const handleClosePopup = () => {\n    setSelectedPoint(null); // Close the popup\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"global-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/world.svg\",\n    alt: \"World Map\",\n    className: \"map-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), points.map(point => /*#__PURE__*/React.createElement(\"div\", {\n    key: point.id,\n    className: \"map-point\",\n    style: {\n      top: point.top,\n      left: point.left\n    },\n    onClick: () => handlePointClick(point),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, \"\\u2022\")), selectedPoint && /*#__PURE__*/React.createElement(PopupCard, {\n    title: selectedPoint.title,\n    name: selectedPoint.name,\n    description: selectedPoint.description,\n    imgUrl: selectedPoint.imgUrl,\n    detailedPageUrl: selectedPoint.detailedPageUrl,\n    onClose: handleClosePopup,\n    className: isTransitioning ? 'fade-out' : '' // Add transition class if transitioning\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }));\n};\nexport default GlobalMap;","map":{"version":3,"names":["React","useState","PopupCard","GlobalMap","selectedPoint","setSelectedPoint","isTransitioning","setIsTransitioning","points","id","title","name","description","imgUrl","detailedPageUrl","top","left","handlePointClick","point","setTimeout","handleClosePopup","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","key","style","onClick","onClose"],"sources":["/Users/mayank/Desktop/components/src/comp/GlobalMap.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PopupCard from './PopupCard'; // Import the PopupCard component\nimport './GlobalMap.css'; // Add CSS for map points and image styling\n\nconst GlobalMap = () => {\n    const [selectedPoint, setSelectedPoint] = useState(null);\n    const [isTransitioning, setIsTransitioning] = useState(false); // New state for transition\n\n    // Define clickable points with coordinates relative to the map image\n    const points = [\n        { id: 1, title: 'Warrior', name: 'Geralt of Rivia', description: 'A skilled Witcher and monster hunter.', imgUrl: '/profile.jpg', detailedPageUrl: '/point1', top: '20%', left: '40%' },\n        { id: 2, title: 'Mage', name: 'Yennefer of Vengerberg', description: 'A powerful sorceress with a mysterious past.', imgUrl: '/img2.jpg', detailedPageUrl: '/point2', top: '50%', left: '60%' },\n        { id: 3, title: 'Princess', name: 'Ciri of Cintra', description: 'A princess with a destiny tied to Geralt and Yennefer.', imgUrl: '/img3.jpg', detailedPageUrl: '/point3', top: '70%', left: '30%' },\n    ];\n\n    const handlePointClick = (point) => {\n        if (selectedPoint) {\n            // If there's a selected point, transition out\n            setIsTransitioning(true);\n            setTimeout(() => {\n                setSelectedPoint(point); // Set the new point after transition\n                setIsTransitioning(false); // Reset the transition state\n            }, 300); // Adjust the timeout duration to match your animation duration\n        } else {\n            // If no point is selected, set the new point immediately\n            setSelectedPoint(point);\n        }\n    };\n\n    const handleClosePopup = () => {\n        setSelectedPoint(null); // Close the popup\n    };\n\n    return (\n        <div className=\"global-map\">\n            {/* Use the SVG image from the public folder */}\n            <img src=\"/world.svg\" alt=\"World Map\" className=\"map-image\" />\n\n            {/* Display points on the static map */}\n            {points.map((point) => (\n                <div\n                    key={point.id}\n                    className=\"map-point\"\n                    style={{ top: point.top, left: point.left }}\n                    onClick={() => handlePointClick(point)}\n                >\n                    â€¢\n                </div>\n            ))}\n\n            {/* Show the popup card for the selected point */}\n            {selectedPoint && (\n                <PopupCard\n                    title={selectedPoint.title}\n                    name={selectedPoint.name}\n                    description={selectedPoint.description}\n                    imgUrl={selectedPoint.imgUrl}\n                    detailedPageUrl={selectedPoint.detailedPageUrl}\n                    onClose={handleClosePopup}\n                    className={isTransitioning ? 'fade-out' : ''} // Add transition class if transitioning\n                />\n            )}\n        </div>\n    );\n};\n\nexport default GlobalMap;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AACrC,OAAO,iBAAiB,CAAC,CAAC;;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAMO,MAAM,GAAG,CACX;IAAEC,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,SAAS;IAAEC,IAAI,EAAE,iBAAiB;IAAEC,WAAW,EAAE,uCAAuC;IAAEC,MAAM,EAAE,cAAc;IAAEC,eAAe,EAAE,SAAS;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,EACvL;IAAEP,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,MAAM;IAAEC,IAAI,EAAE,wBAAwB;IAAEC,WAAW,EAAE,8CAA8C;IAAEC,MAAM,EAAE,WAAW;IAAEC,eAAe,EAAE,SAAS;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,EAC/L;IAAEP,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,UAAU;IAAEC,IAAI,EAAE,gBAAgB;IAAEC,WAAW,EAAE,wDAAwD;IAAEC,MAAM,EAAE,WAAW;IAAEC,eAAe,EAAE,SAAS;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,CACxM;EAED,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAChC,IAAId,aAAa,EAAE;MACf;MACAG,kBAAkB,CAAC,IAAI,CAAC;MACxBY,UAAU,CAAC,MAAM;QACbd,gBAAgB,CAACa,KAAK,CAAC,CAAC,CAAC;QACzBX,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC/B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;MACH;MACAF,gBAAgB,CAACa,KAAK,CAAC;IAC3B;EACJ,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC3Bf,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,oBACIL,KAAA,CAAAqB,aAAA;IAAKC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEvB5B,KAAA,CAAAqB,aAAA;IAAKQ,GAAG,EAAC,YAAY;IAACC,GAAG,EAAC,WAAW;IAACR,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EAG7DpB,MAAM,CAACuB,GAAG,CAAEb,KAAK,iBACdlB,KAAA,CAAAqB,aAAA;IACIW,GAAG,EAAEd,KAAK,CAACT,EAAG;IACda,SAAS,EAAC,WAAW;IACrBW,KAAK,EAAE;MAAElB,GAAG,EAAEG,KAAK,CAACH,GAAG;MAAEC,IAAI,EAAEE,KAAK,CAACF;IAAK,CAAE;IAC5CkB,OAAO,EAAEA,CAAA,KAAMjB,gBAAgB,CAACC,KAAK,CAAE;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1C,QAEI,CACR,CAAC,EAGDxB,aAAa,iBACVJ,KAAA,CAAAqB,aAAA,CAACnB,SAAS;IACNQ,KAAK,EAAEN,aAAa,CAACM,KAAM;IAC3BC,IAAI,EAAEP,aAAa,CAACO,IAAK;IACzBC,WAAW,EAAER,aAAa,CAACQ,WAAY;IACvCC,MAAM,EAAET,aAAa,CAACS,MAAO;IAC7BC,eAAe,EAAEV,aAAa,CAACU,eAAgB;IAC/CqB,OAAO,EAAEf,gBAAiB;IAC1BE,SAAS,EAAEhB,eAAe,GAAG,UAAU,GAAG,EAAG,CAAC;IAAA;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjD,CAEJ,CAAC;AAEd,CAAC;AAED,eAAezB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}