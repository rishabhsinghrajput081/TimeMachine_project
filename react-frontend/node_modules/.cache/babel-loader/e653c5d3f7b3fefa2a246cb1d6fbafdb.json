{"ast":null,"code":"import { geoDelaunay } from \"./delaunay.js\";\nimport { geoInterpolate } from \"d3-geo\";\nimport { tricontour } from \"d3-tricontour\";\nexport function geoContour() {\n  let v;\n  const contour = tricontour().triangulate((data, x, y) => {\n    v = geoDelaunay(data.map((d, i) => [x(d, i), y(d, i)]));\n    return v.delaunay;\n  }).pointInterpolate((i, j, a) => {\n    const {\n      points,\n      projection\n    } = v.delaunay;\n    const A = projection.invert([points[2 * i], points[2 * i + 1]]),\n      B = projection.invert([points[2 * j], points[2 * j + 1]]);\n    return geoInterpolate(A, B)(a);\n  }).ringsort(rings => {\n    // tricky thing: in isobands this function is called twice,\n    // we want to reverse the polygonsâ€™s winding order only in tricontour()\n    // not in isoband()\n    if (rings.length && !rings[0].reversed) {\n      rings.forEach(ring => ring.reverse());\n      rings[0].reversed = true;\n    }\n    return [rings];\n  });\n  return contour;\n}","map":null,"metadata":{},"sourceType":"module"}