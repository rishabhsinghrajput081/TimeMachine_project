{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/components/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport GlobalMap from './comp/GlobalMap';\nimport LoadingAnimation from './comp/LoadingAnimation'; // Import your loading animation component\nimport './App.css'; // General styling for the app\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n\n  // Simulate loading\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false); // Stop loading after 3 seconds\n    }, 3000); // Change duration as needed\n\n    return () => clearTimeout(timer); // Cleanup timer on unmount\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadingAnimation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }) // Show loading animation\n  : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"Interactive Map with Popup Cards\"), /*#__PURE__*/React.createElement(GlobalMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  })));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","GlobalMap","LoadingAnimation","App","loading","setLoading","timer","setTimeout","clearTimeout","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/mayank/Desktop/components/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GlobalMap from './comp/GlobalMap';\nimport LoadingAnimation from './comp/LoadingAnimation'; // Import your loading animation component\nimport './App.css'; // General styling for the app\n\nconst App = () => {\n    const [loading, setLoading] = useState(true);\n\n    // Simulate loading\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setLoading(false); // Stop loading after 3 seconds\n        }, 3000); // Change duration as needed\n\n        return () => clearTimeout(timer); // Cleanup timer on unmount\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {loading ? (\n                <LoadingAnimation /> // Show loading animation\n            ) : (\n                <div>\n                    <h1>Interactive Map with Popup Cards</h1>\n                    <GlobalMap />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,gBAAgB,MAAM,yBAAyB,CAAC,CAAC;AACxD,OAAO,WAAW,CAAC,CAAC;;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EACd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMM,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC3BF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMG,YAAY,CAACF,KAAK,CAAC,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIR,KAAA,CAAAW,aAAA;IAAKC,SAAS,EAAC,KAAK;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACfZ,OAAO,gBACJN,KAAA,CAAAW,aAAA,CAACP,gBAAgB;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAAA,eAErBlB,KAAA,CAAAW,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACIlB,KAAA,CAAAW,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,kCAAoC,CAAC,eACzClB,KAAA,CAAAW,aAAA,CAACR,SAAS;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACX,CAER,CAAC;AAEd,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}