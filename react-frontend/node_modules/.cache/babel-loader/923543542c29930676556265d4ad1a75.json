{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/components/src/comp/GlobalMap.js\";\nimport React, { useState } from 'react';\nimport PopupCard from './PopupCard'; // Import the PopupCard component\nimport './GlobalMap.css'; // Import CSS for styling the map and points\n\nconst GlobalMap = () => {\n  const [selectedPoint, setSelectedPoint] = useState(null); // Store selected map point\n\n  // Define clickable points on the map with relevant details\n  const points = [{\n    id: 1,\n    title: 'Warrior',\n    name: 'Geralt of Rivia',\n    description: 'A skilled Witcher and monster hunter.',\n    imgUrl: '/profile.jpg',\n    detailedPageUrl: '/point1',\n    top: '20%',\n    left: '40%'\n  }, {\n    id: 2,\n    title: 'Mage',\n    name: 'Yennefer of Vengerberg',\n    description: 'A powerful sorceress with a mysterious past.',\n    imgUrl: '/img2.jpg',\n    detailedPageUrl: '/point2',\n    top: '50%',\n    left: '60%'\n  }, {\n    id: 3,\n    title: 'Princess',\n    name: 'Ciri of Cintra',\n    description: 'A princess with a destiny tied to Geralt and Yennefer.',\n    imgUrl: '/img3.jpg',\n    detailedPageUrl: '/point3',\n    top: '70%',\n    left: '30%'\n  }];\n\n  // Handle clicking on a map point to show the popup\n  const handlePointClick = point => {\n    setSelectedPoint(point); // Set the selected point data\n  };\n\n  // Handle closing the popup\n  const handleClosePopup = () => {\n    setSelectedPoint(null); // Reset the selected point\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"global-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/world.png\",\n    alt: \"World Map\",\n    className: \"map-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), points.map(point => /*#__PURE__*/React.createElement(\"div\", {\n    key: point.id,\n    className: \"map-point\",\n    style: {\n      top: point.top,\n      left: point.left\n    },\n    onClick: () => handlePointClick(point) // Open the popup when the point is clicked\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"\\u2022 \")), selectedPoint && /*#__PURE__*/React.createElement(PopupCard, {\n    title: selectedPoint.title,\n    name: selectedPoint.name,\n    description: selectedPoint.description,\n    imgUrl: selectedPoint.imgUrl,\n    detailedPageUrl: selectedPoint.detailedPageUrl,\n    onClose: handleClosePopup // Close functionality for the popup\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }));\n};\nexport default GlobalMap;","map":{"version":3,"names":["React","useState","PopupCard","GlobalMap","selectedPoint","setSelectedPoint","points","id","title","name","description","imgUrl","detailedPageUrl","top","left","handlePointClick","point","handleClosePopup","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","key","style","onClick","onClose"],"sources":["/Users/mayank/Desktop/components/src/comp/GlobalMap.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PopupCard from './PopupCard'; // Import the PopupCard component\nimport './GlobalMap.css'; // Import CSS for styling the map and points\n\nconst GlobalMap = () => {\n    const [selectedPoint, setSelectedPoint] = useState(null); // Store selected map point\n\n    // Define clickable points on the map with relevant details\n    const points = [\n        {\n            id: 1,\n            title: 'Warrior',\n            name: 'Geralt of Rivia',\n            description: 'A skilled Witcher and monster hunter.',\n            imgUrl: '/profile.jpg',\n            detailedPageUrl: '/point1',\n            top: '20%', \n            left: '40%'\n        },\n        {\n            id: 2,\n            title: 'Mage',\n            name: 'Yennefer of Vengerberg',\n            description: 'A powerful sorceress with a mysterious past.',\n            imgUrl: '/img2.jpg',\n            detailedPageUrl: '/point2',\n            top: '50%',\n            left: '60%'\n        },\n        {\n            id: 3,\n            title: 'Princess',\n            name: 'Ciri of Cintra',\n            description: 'A princess with a destiny tied to Geralt and Yennefer.',\n            imgUrl: '/img3.jpg',\n            detailedPageUrl: '/point3',\n            top: '70%',\n            left: '30%'\n        },\n    ];\n\n    // Handle clicking on a map point to show the popup\n    const handlePointClick = (point) => {\n        setSelectedPoint(point); // Set the selected point data\n    };\n\n    // Handle closing the popup\n    const handleClosePopup = () => {\n        setSelectedPoint(null); // Reset the selected point\n    };\n\n    return (\n        <div className=\"global-map\">\n            {/* Map image */}\n            <img src=\"/world.png\" alt=\"World Map\" className=\"map-image\" />\n\n            {/* Render clickable points on the map */}\n            {points.map((point) => (\n                <div\n                    key={point.id}\n                    className=\"map-point\"\n                    style={{ top: point.top, left: point.left }}\n                    onClick={() => handlePointClick(point)} // Open the popup when the point is clicked\n                >\n                    â€¢ {/* Marker symbol */}\n                </div>\n            ))}\n\n            {/* Show PopupCard only if a point is selected */}\n            {selectedPoint && (\n                <PopupCard\n                    title={selectedPoint.title}\n                    name={selectedPoint.name}\n                    description={selectedPoint.description}\n                    imgUrl={selectedPoint.imgUrl}\n                    detailedPageUrl={selectedPoint.detailedPageUrl}\n                    onClose={handleClosePopup} // Close functionality for the popup\n                />\n            )}\n        </div>\n    );\n};\n\nexport default GlobalMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}