{"ast":null,"code":"import { Controls, Quaternion, Vector3 } from 'three';\nconst _changeEvent = {\n  type: 'change'\n};\nconst _EPS = 0.000001;\nconst _tmpQuaternion = new Quaternion();\nclass FlyControls extends Controls {\n  constructor(object, domElement = null) {\n    super(object, domElement);\n    this.movementSpeed = 1.0;\n    this.rollSpeed = 0.005;\n    this.dragToLook = false;\n    this.autoForward = false;\n\n    // internals\n\n    this._moveState = {\n      up: 0,\n      down: 0,\n      left: 0,\n      right: 0,\n      forward: 0,\n      back: 0,\n      pitchUp: 0,\n      pitchDown: 0,\n      yawLeft: 0,\n      yawRight: 0,\n      rollLeft: 0,\n      rollRight: 0\n    };\n    this._moveVector = new Vector3(0, 0, 0);\n    this._rotationVector = new Vector3(0, 0, 0);\n    this._lastQuaternion = new Quaternion();\n    this._lastPosition = new Vector3();\n    this._status = 0;\n\n    // event listeners\n\n    this._onKeyDown = onKeyDown.bind(this);\n    this._onKeyUp = onKeyUp.bind(this);\n    this._onPointerMove = onPointerMove.bind(this);\n    this._onPointerDown = onPointerDown.bind(this);\n    this._onPointerUp = onPointerUp.bind(this);\n    this._onPointerCancel = onPointerCancel.bind(this);\n    this._onContextMenu = onContextMenu.bind(this);\n\n    //\n\n    if (domElement !== null) {\n      this.connect();\n    }\n  }\n  connect() {\n    window.addEventListener('keydown', this._onKeyDown);\n    window.addEventListener('keyup', this._onKeyUp);\n    this.domElement.addEventListener('pointermove', this._onPointerMove);\n    this.domElement.addEventListener('pointerdown', this._onPointerDown);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n    this.domElement.addEventListener('pointercancel', this._onPointerCancel);\n    this.domElement.addEventListener('contextmenu', this._onContextMenu);\n  }\n  disconnect() {\n    window.removeEventListener('keydown', this._onKeyDown);\n    window.removeEventListener('keyup', this._onKeyUp);\n    this.domElement.removeEventListener('pointermove', this._onPointerMove);\n    this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n    this.domElement.removeEventListener('pointerup', this._onPointerUp);\n    this.domElement.removeEventListener('pointercancel', this._onPointerCancel);\n    this.domElement.removeEventListener('contextmenu', this._onContextMenu);\n  }\n  dispose() {\n    this.disconnect();\n  }\n  update(delta) {\n    if (this.enabled === false) return;\n    const object = this.object;\n    const moveMult = delta * this.movementSpeed;\n    const rotMult = delta * this.rollSpeed;\n    object.translateX(this._moveVector.x * moveMult);\n    object.translateY(this._moveVector.y * moveMult);\n    object.translateZ(this._moveVector.z * moveMult);\n    _tmpQuaternion.set(this._rotationVector.x * rotMult, this._rotationVector.y * rotMult, this._rotationVector.z * rotMult, 1).normalize();\n    object.quaternion.multiply(_tmpQuaternion);\n    if (this._lastPosition.distanceToSquared(object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(object.quaternion)) > _EPS) {\n      this.dispatchEvent(_changeEvent);\n      this._lastQuaternion.copy(object.quaternion);\n      this._lastPosition.copy(object.position);\n    }\n  }\n\n  // private\n\n  _updateMovementVector() {\n    const forward = this._moveState.forward || this.autoForward && !this._moveState.back ? 1 : 0;\n    this._moveVector.x = -this._moveState.left + this._moveState.right;\n    this._moveVector.y = -this._moveState.down + this._moveState.up;\n    this._moveVector.z = -forward + this._moveState.back;\n\n    //console.log( 'move:', [ this._moveVector.x, this._moveVector.y, this._moveVector.z ] );\n  }\n  _updateRotationVector() {\n    this._rotationVector.x = -this._moveState.pitchDown + this._moveState.pitchUp;\n    this._rotationVector.y = -this._moveState.yawRight + this._moveState.yawLeft;\n    this._rotationVector.z = -this._moveState.rollRight + this._moveState.rollLeft;\n\n    //console.log( 'rotate:', [ this._rotationVector.x, this._rotationVector.y, this._rotationVector.z ] );\n  }\n  _getContainerDimensions() {\n    if (this.domElement != document) {\n      return {\n        size: [this.domElement.offsetWidth, this.domElement.offsetHeight],\n        offset: [this.domElement.offsetLeft, this.domElement.offsetTop]\n      };\n    } else {\n      return {\n        size: [window.innerWidth, window.innerHeight],\n        offset: [0, 0]\n      };\n    }\n  }\n}\nfunction onKeyDown(event) {\n  if (event.altKey || this.enabled === false) {\n    return;\n  }\n  switch (event.code) {\n    case 'ShiftLeft':\n    case 'ShiftRight':\n      this.movementSpeedMultiplier = .1;\n      break;\n    case 'KeyW':\n      this._moveState.forward = 1;\n      break;\n    case 'KeyS':\n      this._moveState.back = 1;\n      break;\n    case 'KeyA':\n      this._moveState.left = 1;\n      break;\n    case 'KeyD':\n      this._moveState.right = 1;\n      break;\n    case 'KeyR':\n      this._moveState.up = 1;\n      break;\n    case 'KeyF':\n      this._moveState.down = 1;\n      break;\n    case 'ArrowUp':\n      this._moveState.pitchUp = 1;\n      break;\n    case 'ArrowDown':\n      this._moveState.pitchDown = 1;\n      break;\n    case 'ArrowLeft':\n      this._moveState.yawLeft = 1;\n      break;\n    case 'ArrowRight':\n      this._moveState.yawRight = 1;\n      break;\n    case 'KeyQ':\n      this._moveState.rollLeft = 1;\n      break;\n    case 'KeyE':\n      this._moveState.rollRight = 1;\n      break;\n  }\n  this._updateMovementVector();\n  this._updateRotationVector();\n}\nfunction onKeyUp(event) {\n  if (this.enabled === false) return;\n  switch (event.code) {\n    case 'ShiftLeft':\n    case 'ShiftRight':\n      this.movementSpeedMultiplier = 1;\n      break;\n    case 'KeyW':\n      this._moveState.forward = 0;\n      break;\n    case 'KeyS':\n      this._moveState.back = 0;\n      break;\n    case 'KeyA':\n      this._moveState.left = 0;\n      break;\n    case 'KeyD':\n      this._moveState.right = 0;\n      break;\n    case 'KeyR':\n      this._moveState.up = 0;\n      break;\n    case 'KeyF':\n      this._moveState.down = 0;\n      break;\n    case 'ArrowUp':\n      this._moveState.pitchUp = 0;\n      break;\n    case 'ArrowDown':\n      this._moveState.pitchDown = 0;\n      break;\n    case 'ArrowLeft':\n      this._moveState.yawLeft = 0;\n      break;\n    case 'ArrowRight':\n      this._moveState.yawRight = 0;\n      break;\n    case 'KeyQ':\n      this._moveState.rollLeft = 0;\n      break;\n    case 'KeyE':\n      this._moveState.rollRight = 0;\n      break;\n  }\n  this._updateMovementVector();\n  this._updateRotationVector();\n}\nfunction onPointerDown(event) {\n  if (this.enabled === false) return;\n  if (this.dragToLook) {\n    this._status++;\n  } else {\n    switch (event.button) {\n      case 0:\n        this._moveState.forward = 1;\n        break;\n      case 2:\n        this._moveState.back = 1;\n        break;\n    }\n    this._updateMovementVector();\n  }\n}\nfunction onPointerMove(event) {\n  if (this.enabled === false) return;\n  if (!this.dragToLook || this._status > 0) {\n    const container = this._getContainerDimensions();\n    const halfWidth = container.size[0] / 2;\n    const halfHeight = container.size[1] / 2;\n    this._moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n    this._moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n    this._updateRotationVector();\n  }\n}\nfunction onPointerUp(event) {\n  if (this.enabled === false) return;\n  if (this.dragToLook) {\n    this._status--;\n    this._moveState.yawLeft = this._moveState.pitchDown = 0;\n  } else {\n    switch (event.button) {\n      case 0:\n        this._moveState.forward = 0;\n        break;\n      case 2:\n        this._moveState.back = 0;\n        break;\n    }\n    this._updateMovementVector();\n  }\n  this._updateRotationVector();\n}\nfunction onPointerCancel() {\n  if (this.enabled === false) return;\n  if (this.dragToLook) {\n    this._status = 0;\n    this._moveState.yawLeft = this._moveState.pitchDown = 0;\n  } else {\n    this._moveState.forward = 0;\n    this._moveState.back = 0;\n    this._updateMovementVector();\n  }\n  this._updateRotationVector();\n}\nfunction onContextMenu(event) {\n  if (this.enabled === false) return;\n  event.preventDefault();\n}\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module"}