{"ast":null,"code":"import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\nexport function geoVoronoi(data) {\n  const v = function (data) {\n    v.delaunay = null;\n    v._data = data;\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      const temp = v._data.map(d => [v._vx(d), v._vy(d), d]).filter(d => isFinite(d[0] + d[1]));\n      v.points = temp.map(d => [d[0], d[1]]);\n      v.valid = temp.map(d => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) => coll.features.push({\n      type: \"Feature\",\n      geometry: !poly ? null : {\n        type: \"Polygon\",\n        coordinates: [[...poly, poly[0]].map(i => v.delaunay.centers[i])]\n      },\n      properties: {\n        site: v.valid[i],\n        sitecoordinates: v.points[i],\n        neighbours: v.delaunay.neighbors[i] // not part of the public API\n      }\n    }));\n    if (v.valid.length === 1) coll.features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Sphere\"\n      },\n      properties: {\n        site: v.valid[0],\n        sitecoordinates: v.points[0],\n        neighbours: []\n      }\n    });\n    return coll;\n  };\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles.map((tri, index) => {\n        tri = tri.map(i => v.points[i]);\n        tri.center = v.delaunay.centers[index];\n        return tri;\n      }).filter(tri => excess(tri) > 0).map(tri => ({\n        type: \"Feature\",\n        properties: {\n          circumcenter: tri.center\n        },\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [[...tri, tri[0]]]\n        }\n      }))\n    };\n  };\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const _distances = v.delaunay.edges.map(e => geoDistance(v.points[e[0]], v.points[e[1]])),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i]\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]]\n        }\n      }))\n    };\n  };\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map(e => [v.points[e[0]], v.points[e[1]]])\n    };\n  };\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const {\n      centers,\n      polygons\n    } = v.delaunay;\n    const coordinates = [];\n    for (const p of polygons) {\n      if (!p) continue;\n      for (let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0; i < n; p0 = p1, p1 = p[++i]) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates\n    };\n  };\n  v._found = undefined;\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius) return v._found;\n  };\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    const hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0 ? null : {\n      type: \"Polygon\",\n      coordinates: [[...hull.map(i => points[i]), points[hull[0]]]]\n    };\n  };\n  return data ? v(data) : v;\n}","map":null,"metadata":{},"sourceType":"module"}