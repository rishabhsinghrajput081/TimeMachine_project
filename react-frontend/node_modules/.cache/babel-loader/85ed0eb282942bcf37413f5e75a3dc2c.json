{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\nclass Pass {\n  constructor() {\n    this.isPass = true;\n\n    // if set to true, the pass is processed by the composer\n    this.enabled = true;\n\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    this.needsSwap = true;\n\n    // if set to true, the pass clears its buffer before rendering\n    this.clear = false;\n\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    this.renderToScreen = false;\n  }\n  setSize(/* width, height */) {}\n  render(/* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n  dispose() {}\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    this.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n    this.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n  }\n}\nconst _geometry = new FullscreenTriangleGeometry();\nclass FullScreenQuad {\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n}\nexport { Pass, FullScreenQuad };","map":null,"metadata":{},"sourceType":"module"}